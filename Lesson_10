# task_1

CREATE INDEX users_first_name_last_name_idx ON users(first_name,last_name);
CREATE INDEX friendship_friend_id_idx ON friendship (friend_id);
CREATE INDEX likes_user_id_target_id_idx ON likes(user_id, target_id);
CREATE INDEX profiles_user_id_sex_birthday_idx ON profiles(user_id,sex,birthday);
CREATE INDEX messages_from_user_id_to_user_id_idx ON messages (from_user_id,to_user_id);

# task_2

SELECT DISTINCT c.name,
AVG(cu.user_id) OVER name AS average,
MIN(p.birthday) OVER name AS oldest,
MAX(p.birthday) OVER name AS youngest,
SUM(cu.user_id) OVER name AS total_group,
SUM(cu.user_id) OVER()    AS total,
ROUND(SUM(cu.user_id) OVER name/SUM(cu.user_id) OVER() * 100, 2) AS '%%'
FROM 
(communities c
join communities_users cu ON c.id = cu.community_id
join profiles p ON p.user_id = cu.user_id)
WINDOW name AS (PARTITION BY c.name);

# task_3

-- Добавляем столбец Activities в таблицу users --

ALTER TABLE users ADD Activities int;
SELECT * FROM users u;

-- Индексируем --

CREATE INDEX users_Activities ON users (Activities);

--Заполняем его--

UPDATE users u, (select u.id as id, COUNT(DISTINCT l.id) + COUNT(DISTINCT ms.id) + COUNT(DISTINCT md.id) as act
FROM
users u
LEFT JOIN 
messages ms
on
u.id = ms.from_user_id
LEFT JOIN likes l
on l.user_id = u.id
LEFT JOIN media md
ON u.id= md.user_id
GROUP BY u.id) as acted
SET 
Activities = acted.act
WHERE acted.id = u.id;

-- Образец триггера--

CREATE TRIGGER messages_update_user_activities AFTER INSERT ON messages
FOR EACH ROW 
BEGIN 
	UPDATE users u,
	(SELECT ms.from_user_id as id
	FROM
	users u
	LEFT JOIN 
	messages ms
	on ms.from_user_id = u.id
	WHERE ms.id = ms.NEW.id) as updated 
	SET
	u.Activities=u.Activities+1
	WHERE updated.id = u.id;
END//

-- Код --

SELECT u.id FROM users u
ORDER BY Activities
LIMIT 10;

 -- Еще один вариант создать представление и его проиндексировать, но у меня по нему не создается индекс,
-- нужно разбираться
 
 
