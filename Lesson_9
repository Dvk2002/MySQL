# task_1

START TRANSACTION;
DELETE FROM sample.users WHERE id=1;
INSERT INTO sample.users (SELECT * FROM shop.users WHERE id = 1);
ROLLBACK;

# task_2

CREATE VIEW goods as SELECT p.name, c.name as `catalog`
FROM products p
JOIN catalogs c
ON p.catalog_id = c.id
ORDER BY p.name;

# task_3

CREATE VIEW update as
select updated_at, not isnull(updated_at) as `bool` from users ;

# CREATE VIEW update as
select updated_at

# task_1_4
DELETE FROM posts WHERE id not in (SELECT id FROM (select * from posts order by created_at limit 5) as s);






# task_2.1

CREATE USER 'user1'@'localhost' identified by 'User123';
CREATE USER 'admin1'@'localhost' identified by 'Admin123';
grant select on shop.* to user1;
grant all on *.* to admin1;


# task_2.2

create view username as select a.id, a.name
from accounts a;
create user 'user_read'@'localhost' identified by 'User123';
grant select on username.* to 'user_read'@'localhost';



# task_3.1
create function hello()
returns text deterministic
begin
case
WHEN CURRENT_TIME() BETWEEN '06:00:00' AND '12:00:00'
then RETURN 'Доброе утро';
WHEN CURRENT_TIME() BETWEEN '12:00:00' AND '18:00:00'
then RETURN 'Доброй день';
WHEN CURRENT_TIME() BETWEEN '18:00:00' AND '24:00:00'
then RETURN 'Добрый вечер';
ELSE RETURN 'Доброй ночи';
end case;
end//

# task_3.2

CREATE TRIGGER check_products_insert BEFORE INSERT on products 
FOR EACH ROW
BEGIN 
	IF NEW.name IS  NULL AND NEW.description IS  NULL
	THEN
	SIGNAL SQLSTATE '45000' SET message_text = 'Null means';
END IF;
END//

CREATE TRIGGER check_products_update BEFORE UPDATE on products 
FOR EACH ROW
BEGIN 
	IF ((NEW.name IS  NULL AND NEW.description IS  NULL) OR (NEW.name IS  NULL AND OLD.description IS  NULL)
	OR (OLD.name IS  NULL AND NEW.description IS  NULL))
	THEN
	SIGNAL SQLSTATE '45000' SET message_text = 'Null means';
END IF;
END//

# task_3.3

CREATE FUNCTION FIBONACCI(n int)
RETURNS int DETERMINISTIC
BEGIN
	DECLARE f, i, p, q int(255);
SET i = 1, F = 1, p = 1, q= 0;
	WHILE i != n-1 do 
		set q = F;
		set F = F+p;
		set p = q;
		set i = i+1;
	END WHILE;
RETURN(F);
END//



